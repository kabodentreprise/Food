# C:\Users\hp\nado\backend\services\menu_services\routers\menu.py

from sqlalchemy.orm import Session, joinedload
from typing import List, Optional
from fastapi import APIRouter, HTTPException, Depends, status, File, UploadFile, Form
import shutil
import os
from app.schemas import MenuOut, CategoryOut, UserOut, MenuBase, CategoryBase
from services.menu_services.crud_menu import get_menu, create_menu, update_menu_fields, delete_menu, toggle_favorite_menu
from services.categorie_services.crud_category import get_categories
from app.session import SessionLocal, get_db
from app.core.security import get_current_admin
from app.models import Menu, Category

router = APIRouter()

# üìÅ R√©pertoire de stockage des images
# Le chemin absolu est plus s√ªr pour les chemins de syst√®me de fichiers
# Assurez-vous que C:\Users\hp\nado\backend\static\images\menus existe
UPLOAD_DIRECTORY = r"C:\Users\hp\nado\backend\static\images\menus"

# Assurez-vous que le r√©pertoire existe
os.makedirs(UPLOAD_DIRECTORY, exist_ok=True)
print(f"DEBUG: UPLOAD_DIRECTORY est d√©fini sur : {UPLOAD_DIRECTORY}")

# === Cat√©gories ===

@router.get("/categories", response_model=List[CategoryOut], tags=["Cat√©gories"])
def list_categories(db: Session = Depends(get_db)):
    """R√©cup√®re toutes les cat√©gories."""
    return get_categories(db)


# === Menus ===

@router.get("/", response_model=List[MenuOut], tags=["Menus"])
def list_menus(db: Session = Depends(get_db), search: Optional[str] = None):
    """
    R√©cup√®re la liste de tous les menus, avec option de recherche.
    Charge √©galement les informations de cat√©gorie pour chaque menu.
    """
    query = db.query(Menu).options(joinedload(Menu.category))

    if search:
        query = query.filter(
            (Menu.name.ilike(f"%{search}%")) | (Menu.description.ilike(f"%{search}%"))
        )
    return query.all()


@router.post("/", response_model= MenuOut, status_code=status.HTTP_201_CREATED, tags=["Menus"])
async def create_menu_api(
    name: str = Form(...),
    price: float = Form(...),
    description: str = Form(...),
    category_id: int = Form(...),
    image: UploadFile = File(...),
    db: Session = Depends(get_db),
    current_admin: UserOut = Depends(get_current_admin)
):
    """Cr√©e un nouveau menu (acc√®s admin)."""
    # G√©rer le nom de fichier unique et la sauvegarde
    extension = os.path.splitext(image.filename)[1]
    unique_filename = f"{os.urandom(16).hex()}{extension}"
    file_path = os.path.join(UPLOAD_DIRECTORY, unique_filename)

    try:
        with open(file_path, "wb") as buffer:
            shutil.copyfileobj(image.file, buffer)
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur de sauvegarde de l'image : {e}")

    # L'image_url ne doit pas inclure le /static/ car il est d√©j√† dans REACT_APP_STATIC_URL
    # et sera g√©r√© par le mount de FastAPI
    image_url = f"/images/menus/{unique_filename}" # MODIFI√â ICI

    # Cr√©er les donn√©es du menu pour le CRUD
    menu_data = MenuBase(
        name=name,
        price=price,
        description=description,
        category_id=category_id,
        image_url=image_url
    )

    return create_menu(db=db, menu=menu_data)

@router.put("/{menu_id}", response_model=MenuOut, tags=["Menus"])
async def update_menu_api(
    menu_id: int,
    name: Optional[str] = Form(None),
    price: Optional[float] = Form(None),
    description: Optional[str] = Form(None),
    category_id: Optional[int] = Form(None),
    image: Optional[UploadFile] = File(None),
    db: Session = Depends(get_db),
    current_admin: UserOut = Depends(get_current_admin)
):
    """Met √† jour un menu existant (acc√®s admin)."""
    db_menu = get_menu(db, menu_id)
    if not db_menu:
        raise HTTPException(status_code=404, detail="Menu non trouv√©.")

    # Construire un dictionnaire des champs √† mettre √† jour
    update_data = {
        k: v for k, v in {
            "name": name,
            "price": price,
            "description": description,
            "category_id": category_id
        }.items() if v is not None
    }

    # G√©rer la mise √† jour de l'image si fournie
    if image:
        # Supprimer l'ancienne image si elle existe et est dans le bon r√©pertoire
        # Nous v√©rifions si l'URL contient la partie de chemin que nous g√©rons.
        if db_menu.image_url and "/images/menus/" in db_menu.image_url:
            # Reconstruit le chemin absolu de l'ancienne image
            old_filename = os.path.basename(db_menu.image_url)
            old_path = os.path.join(UPLOAD_DIRECTORY, old_filename)
            if os.path.exists(old_path):
                os.remove(old_path)
                print(f"DEBUG: Ancienne image supprim√©e: {old_path}")

        # Enregistrer la nouvelle image
        ext = os.path.splitext(image.filename)[1]
        new_filename = f"{os.urandom(16).hex()}{ext}"
        file_path = os.path.join(UPLOAD_DIRECTORY, new_filename)

        try:
            with open(file_path, "wb") as buffer:
                shutil.copyfileobj(image.file, buffer)
            # L'image_url ne doit pas inclure le /static/
            update_data["image_url"] = f"/images/menus/{new_filename}" # MODIFI√â ICI
            print(f"DEBUG: Nouvelle image sauvegard√©e √†: {file_path}")
        except Exception as e:
            raise HTTPException(status_code=500, detail=f"Erreur de sauvegarde de la nouvelle image : {e}")

    return update_menu_fields(db=db, menu_id=menu_id, fields=update_data)

@router.delete("/{menu_id}", status_code=status.HTTP_204_NO_CONTENT, tags=["Menus"])
def delete_menu_api(
    menu_id: int,
    db: Session = Depends(get_db),
    current_admin: UserOut = Depends(get_current_admin)
):
    """Supprime un menu (acc√®s admin)."""
    db_menu = get_menu(db, menu_id)
    if not db_menu:
        raise HTTPException(status_code=404, detail="Menu non trouv√©.")

    # Supprimer l'image associ√©e si elle existe
    if db_menu.image_url and "/images/menus/" in db_menu.image_url:
        image_filename = os.path.basename(db_menu.image_url)
        image_path = os.path.join(UPLOAD_DIRECTORY, image_filename)
        if os.path.exists(image_path):
            os.remove(image_path)
            print(f"DEBUG: Image supprim√©e lors de la suppression du menu: {image_path}")

    deleted = delete_menu(db, menu_id)
    if not deleted:
        raise HTTPException(status_code=500, detail="Erreur lors de la suppression.")
    return {"message": "Menu supprim√© avec succ√®s."}

@router.get("/menus/count", response_model=int)
def count_menus(db: Session = Depends(get_db)):
    return db.query(Menu).count()


# === Favoris ===

@router.get("/favoris", response_model=List[MenuOut], tags=["Menus"])
def get_favorite_menus_api(db: Session = Depends(get_db)):
    """
    R√©cup√®re tous les menus marqu√©s comme favoris.
    Charge √©galement les informations de cat√©gorie pour chaque menu.
    """
    # Utilise joinedload pour s'assurer que la cat√©gorie est charg√©e pour le sch√©ma MenuOut
    return db.query(Menu).options(joinedload(Menu.category)).filter(Menu.is_favorite == True).all()

@router.post("/{menu_id}/favoris", response_model= MenuOut, tags=["Menus"])
def toggle_favorite_menu_api(
    menu_id: int,
    db: Session = Depends(get_db),
    current_admin: UserOut = Depends(get_current_admin) # L'authentification admin est requise pour basculer les favoris
):
    """Bascule le statut favori d'un menu (acc√®s admin)."""
    menu = toggle_favorite_menu(db, menu_id)
    if not menu:
        raise HTTPException(status_code=404, detail="Menu non trouv√©.")
    return menu